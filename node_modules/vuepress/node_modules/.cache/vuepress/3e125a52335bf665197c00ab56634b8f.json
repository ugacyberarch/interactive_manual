{"remainingRequest":"/Users/sammyvo/cyberarch-manual/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sammyvo/cyberarch-manual/docs/.vuepress/components/Password/Cracker.vue?vue&type=style&index=0&id=4dd67fbc&scoped=true&lang=css","dependencies":[{"path":"/Users/sammyvo/cyberarch-manual/docs/.vuepress/components/Password/Cracker.vue","mtime":1602086742467},{"path":"/Users/sammyvo/cyberarch-manual/node_modules/css-loader/index.js","mtime":1602086796078},{"path":"/Users/sammyvo/cyberarch-manual/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602086796509},{"path":"/Users/sammyvo/cyberarch-manual/node_modules/vuepress/node_modules/postcss-loader/lib/index.js","mtime":1602086796406},{"path":"/Users/sammyvo/cyberarch-manual/node_modules/cache-loader/dist/cjs.js","mtime":1602086795963},{"path":"/Users/sammyvo/cyberarch-manual/node_modules/vue-loader/lib/index.js","mtime":1602086796509}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.password-cracker {\n  padding: 0 20px;\n}\n\ninput.password {\n  box-sizing: border-box;\n  display: inline-block;\n\n  color: white;\n  text-align: center;\n  font-size: 32px;\n\n  width: 100%;\n  margin: 8px 0;\n  padding-right: 10px;\n\n  border: none;\n  background: none;\n}\n\n.guess {\n  position: relative;\n}\n\n.buttons {\n  position: absolute;\n  right: 0px;\n  top: 20px;\n}\n\n.buttons button {\n  font-size: 14px;\n  color: #FFF;\n  padding: 2px 10px;\n  margin-left: 8px;\n  display: inline-block;\n  border: 1px solid white;\n  background: none;\n}\n\n.buttons button:hover {\n  background: #fff;\n  color: #333;\n}\n\n.buttons button:disabled {\n  opacity: 0.4;\n}\n\n/* Progress bar */\n.progress {\n  display: block;\n  width: 100%;\n  text-align: center;\n}\n\n.progress span {\n  line-height: 24px;\n  padding-left: 4px;\n  color: #FFF;\n}\n\n.progress .bar {\n  width: 100%;\n  height: 4px;\n  background-color: #f1f1f1;\n  text-align: center !important;\n  opacity: 0.4;\n}\n\n.progress .fill {\n  height: 100%;\n  background-color: #2196F3;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n}\n\n/* Character indicators */\n.characters {\n  display: block;\n  text-align: left;\n  height: 24px;\n  margin-top: -14px;\n  opacity: 0.5;\n}\n\n.characters i {\n  font-size: 12px;\n  border: 1px solid #ccc;\n  padding: 2px 4px;\n  margin: 0 4px;\n  background: white;\n}\n\n.characters i.active {\n opacity: 1;\n background-color: green;\n color: #FFF;\n border: 1px solid #4CAF50 !important;\n}\n\n/* Speed slider */\n.speed {\n  display: inline-block;\n  float: right;\n\n  color: #FFF;\n  font-size: 12px;\n  text-align: center;\n\n  width: 200px;\n  margin-top: -24px;\n}\n\n.speed label {\n  display: block;\n  margin: 0 auto;\n}\n\n.speed span {\n  display: block;\n  margin: 0 auto;\n}\n\n.speed input {\n  display: block;\n  width: 100%;\n}\n\n.slider {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 6px;\n    background: #d3d3d3;\n    outline: none;\n    opacity: 0.7;\n    -webkit-transition: .2s;\n    transition: opacity .2s;\n    border-radius: 5px;\n    margin: 8px 0;\n}\n\n.slider:hover {\n    opacity: 1;\n}\n\n.slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 14px;\n    height: 14px;\n    background: #FFF;\n    cursor: pointer;\n    border-radius: 50%;\n}\n\n.slider::-moz-range-thumb {\n    width: 14px;\n    height: 14px;\n    background: #FFF;\n    cursor: pointer;\n    border-radius: 50%;\n}\n\ninput[type='range']::-moz-focus-outer {\n  border: 0;\n}\n\n\n",{"version":3,"sources":["Cracker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+OA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Cracker.vue","sourceRoot":"docs/.vuepress/components/Password","sourcesContent":["<template>\n  <div class=\"password-cracker\">\n\n    <div class=\"guess\">\n      <input class=\"password\" v-bind:value=\"guess\" disabled />\n\n      <div class=\"buttons\">\n        <button v-on:click=\"reset\">Reset</button>\n        <button v-on:click=\"pause\" :disabled=\"tasks.length == 0\">Pause</button>\n        <button v-on:click=\"crack\" :disabled=\"tasks.length > 0\">Crack</button>\n      </div>\n    </div>\n\n    <div class=\"progress\">\n      <div class=\"bar\">\n        <div class=\"fill\" v-bind:style=\"{ width: percentDone + '%' }\"></div>\n      </div>\n      <span>{{ percentDone }}%</span>\n    </div>\n\n    <div class=\"characters\">\n      <i v-bind:class=\"{ active: digit }\">digit</i>\n      <i v-bind:class=\"{ active: lower }\">lower</i>\n      <i v-bind:class=\"{ active: upper }\">upper</i>\n      <i v-bind:class=\"{ active: symbol }\">symbol</i>\n    </div>\n\n    <div class=\"speed\">\n      <input\n        v-bind:value=\"speed\"\n        v-on:input=\"$emit('change-speed', $event.target.value)\"\n        class=\"slider\"\n        type=\"range\" min=\"1\" max=\"10\" step=\"1\" />\n      <span>{{ passwordsPerSecond.toLocaleString() }}/second</span>\n    </div>\n\n    <div style=\"clear:both;\"></div>\n\n    <div v-if=\"false\" class=\"time\">\n      <div>Tried {{ progress }}</div>\n      Estimated time remaining:<br>\n      {{ timeRemaining }}\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport anime from 'animejs';\nimport * as _ from 'lodash';\n\nconst hsimp = require('./hsimp')\n\n/*\n * Find the nth set in a cartesian product of sets:\n *  N = size(A) * size(B) * ... * size(Z)\n *  c(i) = [A[i_a], B[i_b], ... Z[i_z]]\n *  i_a = i/(size(B)*size(C)*...*size(Z))\n *  i_b = (i/size(C)*...*size(z-1)) mod size(B)\n *  ...\n *  i_z = i mod size(Z)\n */\nfunction nthProduct(sets, n) {\n  let indices = [];\n\n  let tsize = (i) => sets\n    .slice(i)\n    .map((s) => s.length)\n    .reduce((acc,v) => acc * v);\n\n  if (sets.length > 1) {\n    indices.push(Math.floor( n / tsize(1) ));\n\n    for (var j = 1; j < (sets.length - 1); j++) {\n      indices.push(Math.floor( (n / tsize(j + 1)) % sets[j].length ))\n    }\n  }\n  indices.push( n % sets[sets.length - 1].length );\n\n  return indices.map((i_x,i) => sets[i][i_x]);\n}\n\nexport default {\n  props: ['password', 'speed'],\n\n  data() {\n    return {\n      chars: [],\n      tasks: [],\n      counter: 0,\n    }\n  },\n\n  computed: {\n    digit() {\n      return /[0-9]/.test(this.password)\n    },\n    lower() {\n      return /[a-z]/.test(this.password)\n    },\n    upper() {\n      return /[A-Z]/.test(this.password)\n    },\n    symbol() {\n      return /[$-/:-?{-~!\"^_`\\[\\]]/.test(this.password)\n    },\n    alpha() {\n      var sets = [];\n      if (this.symbol) { sets = sets.concat(_.range(0x20, 0x30)) }\n      if (this.upper) { sets = sets.concat(_.range(0x41, 0x5b)) }\n      if (this.digit) { sets = sets.concat(_.range(0x30, 0x3a)) }\n      if (this.symbol) { sets = sets.concat(_.range(0x3a, 0x41)) }\n      if (this.lower) { sets = sets.concat(_.range(0x61, 0x7b)) }\n      if (this.symbol) { sets = sets.concat(_.range(0x7b, 0x7f)) }\n      return new Set(_.flatten(sets))\n    },\n    guess() {\n      let chars = this.chars.slice().reverse();\n      return String.fromCharCode(...chars);\n    },\n    passwordsPerSecond() {\n      return Math.pow(10, this.speed) * 4;\n    },\n    percentDone() {\n      let possible = (this.possibleCombinations || 1);\n      let pct = (this.counter / possible) * 100;\n      //return Math.round(pct * 100) / 100\n      return Math.ceil(pct);\n    },\n    possibleCombinations() {\n      return Math.pow(this.alpha.size, this.password.length);\n    },\n    progress() {\n      let count = hsimp.namedNumber(this.counter).getName();\n      let total = hsimp.namedNumber(this.possibleCombinations).getName();\n      return count + ' of ' + total;\n    },\n    timeRemaining() {\n      let remaining = this.possibleCombinations - this.counter;\n      let time = remaining / this.passwordsPerSecond;\n\n      let period = hsimp.period(time)\n      let periodLength = period.getLength()\n\n      let formattedPeriodLength = hsimp.namedNumber(periodLength).getName();\n      let periodName = formattedPeriodLength === \"1\"\n          ? period.getSingular()\n          : period.getPlural();\n\n      let periodString = formattedPeriodLength + \" \" + periodName;\n\n      return periodString\n    },\n  },\n\n  watch: {\n    guess(newGuess, oldGuess) {\n      if (newGuess == this.password) {\n        this.pause()\n        this.counter = this.possibleCombinations\n      }\n      if (newGuess.length > this.password.length) {\n        this.pause()\n        this.chars = _.invokeMap(this.password, 'charCodeAt').reverse()\n        this.counter = this.possibleCombinations\n      }\n    },\n  },\n\n  methods: {\n    reset() {\n      this.pause();\n      this.chars = [];\n      this.counter = 0;\n      this.$emit('reset');\n    },\n    fudge() {\n      // TODO: fix fudge after reset\n      if (this.speed < 2) { return }\n\n      // We don't actually guess passwords very fast, so we can cheat and\n      // skip ahead in the sequence. Since we already know the password, we\n      // we can't miss it.\n      anime({\n        targets: this,\n        counter: this.counter + this.passwordsPerSecond,\n        round: 1,\n        duration: 1000,\n        easing: 'easeInOutQuint',\n        update: () => {\n          // Possible values per character\n          let base = this.alpha.size\n          // Number of characters\n          let nchars = Math.ceil(Math.log(this.counter) / Math.log(base));\n          // Offset into sequences of length nchars\n          let i = this.counter % Math.pow(base, nchars)\n          // Find sequence at offset\n          let seq = nthProduct(_.fill(Array(nchars), Array.from(this.alpha)), i)\n          // Skip to sequence\n          this.chars.splice(0, seq.length, ...seq.reverse())\n        }\n      });\n\n    },\n    next(seq, start, stop) {\n      // Next string in sequence\n      this.counter++\n\n      let i = 0\n      while (seq[i] == stop) {\n        //seq[i++] = start \n        this.$set(seq, i++, start)\n      }\n      if (i == seq.length) {\n        seq.push(start)\n        return\n      }\n      //seq[i]++\n      this.$set(seq, i, seq[i] + 1)\n    },\n    crack() {\n      let start = Math.min(...this.alpha)\n      let stop = Math.max(...this.alpha)\n\n      // Simulate guesses per second.\n      this.tasks.push(setInterval(this.fudge, 900))\n\n      // Continuously increment string\n      this.tasks.push(setInterval(this.next, 100, this.chars, start, stop))\n    },\n    pause() {\n      _.each(this.tasks, clearInterval)\n      this.tasks = []\n    },\n  }\n}\n</script>\n\n<style scoped>\n.password-cracker {\n  padding: 0 20px;\n}\n\ninput.password {\n  box-sizing: border-box;\n  display: inline-block;\n\n  color: white;\n  text-align: center;\n  font-size: 32px;\n\n  width: 100%;\n  margin: 8px 0;\n  padding-right: 10px;\n\n  border: none;\n  background: none;\n}\n\n.guess {\n  position: relative;\n}\n\n.buttons {\n  position: absolute;\n  right: 0px;\n  top: 20px;\n}\n\n.buttons button {\n  font-size: 14px;\n  color: #FFF;\n  padding: 2px 10px;\n  margin-left: 8px;\n  display: inline-block;\n  border: 1px solid white;\n  background: none;\n}\n\n.buttons button:hover {\n  background: #fff;\n  color: #333;\n}\n\n.buttons button:disabled {\n  opacity: 0.4;\n}\n\n/* Progress bar */\n.progress {\n  display: block;\n  width: 100%;\n  text-align: center;\n}\n\n.progress span {\n  line-height: 24px;\n  padding-left: 4px;\n  color: #FFF;\n}\n\n.progress .bar {\n  width: 100%;\n  height: 4px;\n  background-color: #f1f1f1;\n  text-align: center !important;\n  opacity: 0.4;\n}\n\n.progress .fill {\n  height: 100%;\n  background-color: #2196F3;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n}\n\n/* Character indicators */\n.characters {\n  display: block;\n  text-align: left;\n  height: 24px;\n  margin-top: -14px;\n  opacity: 0.5;\n}\n\n.characters i {\n  font-size: 12px;\n  border: 1px solid #ccc;\n  padding: 2px 4px;\n  margin: 0 4px;\n  background: white;\n}\n\n.characters i.active {\n opacity: 1;\n background-color: green;\n color: #FFF;\n border: 1px solid #4CAF50 !important;\n}\n\n/* Speed slider */\n.speed {\n  display: inline-block;\n  float: right;\n\n  color: #FFF;\n  font-size: 12px;\n  text-align: center;\n\n  width: 200px;\n  margin-top: -24px;\n}\n\n.speed label {\n  display: block;\n  margin: 0 auto;\n}\n\n.speed span {\n  display: block;\n  margin: 0 auto;\n}\n\n.speed input {\n  display: block;\n  width: 100%;\n}\n\n.slider {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 6px;\n    background: #d3d3d3;\n    outline: none;\n    opacity: 0.7;\n    -webkit-transition: .2s;\n    transition: opacity .2s;\n    border-radius: 5px;\n    margin: 8px 0;\n}\n\n.slider:hover {\n    opacity: 1;\n}\n\n.slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 14px;\n    height: 14px;\n    background: #FFF;\n    cursor: pointer;\n    border-radius: 50%;\n}\n\n.slider::-moz-range-thumb {\n    width: 14px;\n    height: 14px;\n    background: #FFF;\n    cursor: pointer;\n    border-radius: 50%;\n}\n\ninput[type='range']::-moz-focus-outer {\n  border: 0;\n}\n\n\n</style>\n"]}]}